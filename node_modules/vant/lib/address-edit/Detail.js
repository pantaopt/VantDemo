"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _create = _interopRequireDefault(require("../utils/create"));

var _field = _interopRequireDefault(require("../field"));

var _utils = require("../utils");

var _default = (0, _create.default)({
  render: function render() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('cell', {
      class: _vm.b()
    }, [_c('field', _vm._g({
      ref: "field",
      attrs: {
        "autosize": "",
        "rows": _vm.detailRows,
        "clearable": !_vm.isAndroid,
        "type": "textarea",
        "maxlength": "200",
        "value": _vm.value,
        "error": _vm.error,
        "label": _vm.$t('label'),
        "placeholder": _vm.$t('placeholder')
      }
    }, _vm.$listeners), [_vm.showIcon && _vm.isAndroid ? _c('div', {
      class: _vm.b('finish'),
      attrs: {
        "slot": "icon"
      },
      domProps: {
        "textContent": _vm._s(_vm.$t('complete'))
      },
      on: {
        "click": function click($event) {
          _vm.$refs.field.blur();
        }
      },
      slot: "icon"
    }) : _vm._e()]), _vm._l(_vm.searchList, function (express) {
      return _c('cell', {
        key: express.name + express.address,
        attrs: {
          "title": express.name,
          "label": express.address,
          "icon": "location-o",
          "clickable": ""
        },
        on: {
          "click": function click($event) {
            _vm.onSelect(express);
          }
        }
      });
    })], 2);
  },
  name: 'address-edit-detail',
  components: {
    Field: _field.default
  },
  props: {
    value: String,
    error: Boolean,
    focused: Boolean,
    detailRows: Number,
    searchResult: Array,
    showSearchResult: Boolean
  },
  created: function created() {
    this.isAndroid = (0, _utils.isAndroid)();
  },
  computed: {
    searchList: function searchList() {
      if (this.showSearchResult && this.focused) {
        return this.searchResult || [];
      }

      return [];
    },
    showIcon: function showIcon() {
      return this.value && this.focused;
    }
  },
  methods: {
    onSelect: function onSelect(express) {
      this.$emit('select-search', express);
      this.$emit('input', ((express.address || '') + " " + (express.name || '')).trim());
    }
  }
});

exports.default = _default;